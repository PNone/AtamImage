name: Build and Export Docker Images on Tag

on:
  push:
    tags:
      - 'v*'  # triggers on tag pushes like v1.0.0

jobs:
  build-and-export:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - name: atam
            dockerfile: atam/Atam.Dockerfile
            context: atam
            secrets:
              - STUDENT_PASS_ATAM
              - STUDENT_GROUP_NAME_ATAM
              - STUDENT_GROUP_UID_ATAM
              - STUDENT_UID_ATAM
          - name: opsys
            dockerfile: OperatingSystems/OpSys.Dockerfile
            context: OperatingSystems
            secrets:
              - STUDENT_PASS_OS
              - STUDENT_GROUP_NAME_OS
              - STUDENT_GROUP_UID_OS
              - STUDENT_UID_OS

    env:
      OP_SYS_TAG: ${{ github.ref_name }}
      COMMIT_TAG: ${{ github.sha }}

    permissions:
      contents: write  # Required to upload release assets

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up Buildx with docker-container driver for caching support
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          install: true

      - name: Create and use custom builder
        run: |
          docker buildx create --name mybuilder --driver docker-container --use
          docker buildx inspect --bootstrap

      # Restore Docker layer cache (global key)
      - name: Restore Docker layer cache
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: docker-global-cache
          restore-keys: |
            docker-global-cache

      - name: Build ${{ matrix.target.name }} image
        run: |
          BUILD_ARGS=""
          for secret in $(echo '${{ toJson(matrix.target.secrets) }}' | jq -r '.[]'); do
            secret_id=$(echo "$secret" | tr '[:upper:]' '[:lower:]')
            BUILD_ARGS="$BUILD_ARGS --secret id=$secret_id,env=$secret"
          done

          docker buildx build \
            --builder mybuilder \
            --platform linux/amd64 \
            $BUILD_ARGS \
            -t ${{ matrix.target.name }}:${COMMIT_TAG} \
            -f ${{ matrix.target.dockerfile }} ${{ matrix.target.context }} \
            --cache-from type=local,src=/tmp/.buildx-cache \
            --cache-to type=local,dest=/tmp/.buildx-cache,mode=max \
            --load
        env:
          STUDENT_PASS_ATAM: ${{ secrets.STUDENT_PASS_ATAM }}
          STUDENT_GROUP_NAME_ATAM: ${{ secrets.STUDENT_GROUP_NAME_ATAM }}
          STUDENT_GROUP_UID_ATAM: ${{ secrets.STUDENT_GROUP_UID_ATAM }}
          STUDENT_UID_ATAM: ${{ secrets.STUDENT_UID_ATAM }}
          STUDENT_PASS_OS: ${{ secrets.STUDENT_PASS_OS }}
          STUDENT_GROUP_NAME_OS: ${{ secrets.STUDENT_GROUP_NAME_OS }}
          STUDENT_GROUP_UID_OS: ${{ secrets.STUDENT_GROUP_UID_OS }}
          STUDENT_UID_OS: ${{ secrets.STUDENT_UID_OS }}

      # Save image tarballs
      - name: Save ${{ matrix.target.name }} image tarball
        run: |
          docker save ${{ matrix.target.name }}:${COMMIT_TAG} -o ${{ matrix.target.name }}Ubuntu-image-${OP_SYS_TAG}.tar

      # Export rootfs tarballs from containers
      - name: Export ${{ matrix.target.name }} rootfs tarball
        run: |
          container_id=$(docker run -t -d --name ${{ matrix.target.name }}Container ${{ matrix.target.name }}:${COMMIT_TAG} /bin/bash)
          docker export --output=${{ matrix.target.name }}Ubuntu-rootfs-${OP_SYS_TAG}.tar $container_id

      # Compress all tarballs
      - name: Compress ${{ matrix.target.name }} tarballs
        run: |
          gzip -9 ${{ matrix.target.name }}Ubuntu-image-${OP_SYS_TAG}.tar
          gzip -9 ${{ matrix.target.name }}Ubuntu-rootfs-${OP_SYS_TAG}.tar

      # Upload tarballs as artifacts
      - name: Upload ${{ matrix.target.name }} tarballs
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target.name }}-Tarballs-${{ env.OP_SYS_TAG }}
          path: |
            ${{ matrix.target.name }}Ubuntu-image-${{ env.OP_SYS_TAG }}.tar.gz
            ${{ matrix.target.name }}Ubuntu-rootfs-${{ env.OP_SYS_TAG }}.tar.gz

      # Upload tarballs to GitHub Release
      - name: Upload ${{ matrix.target.name }} tarballs to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ matrix.target.name }}Ubuntu-image-${{ env.OP_SYS_TAG }}.tar.gz
            ${{ matrix.target.name }}Ubuntu-rootfs-${{ env.OP_SYS_TAG }}.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_ACCESS_TOKEN }}

      # Save Docker layer cache
      - name: Save Docker layer cache
        uses: actions/cache/save@v3
        if: always()
        with:
          path: /tmp/.buildx-cache
          key: docker-global-cache
